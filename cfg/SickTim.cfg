#! /usr/bin/env python
#
# Copyright (C) 2012, University of Osnabrueck
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the University of Osnabrueck nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#  Created on: 17.07.2012
#
#      Author: Martin Guenther <mguenthe@uos.de>
#
#  Based on hokuyo_node/cfg/Hokuyo.cfg

PACKAGE='sick_tim'
from dynamic_reconfigure.parameter_generator_catkin import *

from math import pi

gen = ParameterGenerator()
#       Name              Type      Reconfiguration level             Description                                    Default     Min         Max
gen.add("min_ang",        double_t, 0, "The angle of the first range measurement [rad].",                            -0.75 * pi, -0.75 * pi, 0.75 * pi)
gen.add("max_ang",        double_t, 0, "The angle of the last range measurement [rad].",                              0.75 * pi, -0.75 * pi, 0.75 * pi)
gen.add("intensity",      bool_t,   0, "Whether or not to return intensity values. RSSI output must be enabled on scanner (see wiki).", True)
gen.add("skip",           int_t,    0, "The number of scans to skip between each measured scan.",                     0,          0,         9)
gen.add("frame_id",       str_t,    0, "The TF frame in which laser scans will be returned.",                        "laser")
gen.add("time_offset",    double_t, 0, "An offset to add to the time stamp before publication of a scan [s].",       -0.001,     -0.25, 0.25)
gen.add("auto_reboot",    bool_t,   0, "Whether or not to reboot laser if it reports an error",                      False)

exit(gen.generate(PACKAGE, "sick_tim", "SickTim"))
